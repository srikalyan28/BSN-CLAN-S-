# -*- coding: utf-8 -*-import discord

import discordfrom discord.ext import commands

from discord.ext import commandsfrom discord import app_commands

from discord import app_commandsimport asyncio

import asynciofrom datetime import datetime

from datetime import datetimefrom typing import List, Optional, Dict

from typing import List, Optional, Dictimport math

import mathfrom .views.staff_management import StaffManagementView

from .views.staff_management import StaffManagementViewfrom .views.category_selection import CategorySelectionView, PreviousPageButton, NextPageButton

from .views.category_selection import CategorySelectionView, PreviousPageButton, NextPageButton



class MainDashboard(commands.Cog):

class MainDashboard(commands.Cog):    """Main dashboard cog for managing tickets and panels"""

    """Main dashboard cog for managing tickets and panels"""    

        TICKET_TYPES = [

    TICKET_TYPES = [        "clan_apply", "clan_join", "esports_apply", "help_support",

        "clan_apply", "clan_join", "esports_apply", "help_support",        "giveaway_host", "giveaway_claim", "partnership_apply", "staff_apply"

        "giveaway_host", "giveaway_claim", "partnership_apply", "staff_apply"    ]

    ]    

        def __init__(self, bot):

    def __init__(self, bot):        self.bot = bot

        self.bot = bot        self.mongo = bot.mongo_manager

        self.mongo = bot.mongo_manager        self.data_manager = bot.data_manager

        self.data_manager = bot.data_manager

    @app_commands.command(name="manage_ticket_staff", description="Add/remove staff for ticket handling")

    @app_commands.describe(

async def setup(bot):        action="Choose whether to add or remove staff",

    await bot.add_cog(MainDashboard(bot))        ticket_type="The type of ticket to manage staff for",
        user="The user to add/remove as staff (optional)",
        role="The role to add/remove as staff (optional)"
    )
    @app_commands.choices(
        action=[
            app_commands.Choice(name="Add", value="add"),
            app_commands.Choice(name="Remove", value="remove")
        ],
        ticket_type=[
            app_commands.Choice(name=t.replace("_", " ").title(), value=t)
            for t in TICKET_TYPES
        ]
    )
    async def manage_ticket_staff(
        self,
        interaction: discord.Interaction,
        action: str,
        ticket_type: str,
        user: discord.Member = None,
        role: discord.Role = None
    ):
        if not user and not role:
            await interaction.response.send_message(
                "‚ùå You must mention either a user or a role!",
                ephemeral=True
            )
            return

        # Check permissions
        user_roles = [r.id for r in interaction.user.roles]
        has_permission = await self.mongo.check_dashboard_permission(
            dashboard_name="main_dashboard",
            user_id=interaction.user.id,
            user_roles=user_roles,
            guild_id=interaction.guild_id
        )

        if not has_permission:
            await interaction.response.send_message(
                "‚ùå You don't have permission to manage ticket staff!",
                ephemeral=True
            )
            return

        success = False
        if action == "add":
            if user:
                success = await self.mongo.add_ticket_staff(ticket_type, interaction.guild_id, user_id=user.id)
            if role:
                success = await self.mongo.add_ticket_staff(ticket_type, interaction.guild_id, role_id=role.id)
        else:  # remove
            if user:
                success = await self.mongo.remove_ticket_staff(ticket_type, interaction.guild_id, user_id=user.id)
            if role:
                success = await self.mongo.remove_ticket_staff(ticket_type, interaction.guild_id, role_id=role.id)

        # Get current staff list
        staff = await self.mongo.get_ticket_staff(ticket_type, interaction.guild_id)
        
        embed = discord.Embed(
            title=f"üé´ Ticket Staff Management - {ticket_type.replace('_', ' ').title()}",
            color=0x00ff00 if success else 0xff0000
        )
        
        status = "added to" if action == "add" else "removed from"
        target = f"User {user.mention}" if user else f"Role {role.mention}"
        
        if success:
            embed.description = f"‚úÖ {target} successfully {status} ticket staff!"
        else:
            embed.description = f"‚ùå Failed to {action} {target.lower()} to ticket staff!"
        
        # Add current staff list to embed
        staff_list = []
        for user_id in staff['users']:
            member = interaction.guild.get_member(user_id)
            if member:
                staff_list.append(f"üë§ {member.mention}")
                
        for role_id in staff['roles']:
            role = interaction.guild.get_role(role_id)
            if role:
                staff_list.append(f"üë• {role.mention}")
                
        if staff_list:
            embed.add_field(
                name="Current Staff",
                value="\n".join(staff_list),
                inline=False
            )
        else:
            embed.add_field(
                name="Current Staff",
                value="No staff members or roles set",
                inline=False
            )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="main_dashboard", description="üé´ Access ticket management dashboard")
    async def main_dashboard(self, interaction: discord.Interaction):
        # Check permissions
        user_roles = [role.id for role in interaction.user.roles]
        has_permission = await self.mongo.check_dashboard_permission(
            dashboard_name="main_dashboard",
            user_id=interaction.user.id,
            user_roles=user_roles,
            guild_id=interaction.guild_id
        )

        if not has_permission:
            embed = discord.Embed(
                title="‚ùå Access Denied",
                description="You don't have permission to access this dashboard.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        embed = discord.Embed(
            title="üé´ BLACKSPIRE NATION - Main Dashboard",
            description="**Ticket Management Hub**\n\nManage all ticketing systems for the server:",
            color=0x00ff00,
            timestamp=discord.utils.utcnow()
        )
        embed.set_footer(text="Blackspire Nation Ticket Control", icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None)
        embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)

        view = MainDashboardView(self.bot)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class MainDashboardView(discord.ui.View):
    """Main dashboard view for ticket management"""
    
    def __init__(self, bot, parent_view=None):
        super().__init__(timeout=300)
        self.bot = bot
        self.mongo = bot.mongo_manager
        self.data_manager = bot.data_manager
        self.parent_view = parent_view

    @discord.ui.button(label="Staff Management", style=discord.ButtonStyle.primary, emoji="üë•", row=0)
    async def staff_management(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üë• Staff Management",
            description="Select a ticket type to manage its staff",
            color=0x9932cc
        )
        view = CategorySelectionView(self.bot, "staff_management", callback=self._handle_staff_selection)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def _handle_staff_selection(self, interaction: discord.Interaction, ticket_type: str):
        view = StaffManagementView(self.bot, ticket_type)
        embed = discord.Embed(
            title=f"üë• Staff Management - {ticket_type.replace('_', ' ').title()}",
            description="Choose what you want to configure:",
            color=0x9932cc
        )
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(label="Back", style=discord.ButtonStyle.danger, emoji="‚¨ÖÔ∏è", row=4)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.parent_view:
            await interaction.response.edit_message(view=self.parent_view)
            return
            
        embed = discord.Embed(
            title="üé´ BLACKSPIRE NATION - Main Dashboard",
            description="**Ticket Management Hub**\n\nManage all ticketing systems for the server:",
            color=0x00ff00,
            timestamp=discord.utils.utcnow()
        )
        embed.set_footer(text="Blackspire Nation Ticket Control", icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None)
        embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
        await interaction.response.edit_message(embed=embed, view=self)


async def setup(bot):
    await bot.add_cog(MainDashboard(bot))
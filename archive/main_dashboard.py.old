# -*- coding: utf-8 -*-
"""
Main Dashboard Cog for Blackspire Nation
- Ticket system hub (main/individual panel configuration, deploy, with roles, images, permissions)
- Matches PLAN requirements; paging for categories/channels, null-byte free, all commands use mention not forms.
"""
import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime

# Views and ticket logic imports (should exist in your folder structure)
from .views.staff_management import StaffManagementView
from .views.category_selection import CategorySelectionView
from .views.clan_selection import ClanSelectionView

# Tickets (implement these separately)
from .TICKETS.join_clan import JoinClanTicket
from .TICKETS.apply_clan import ApplyClanTicket
from .TICKETS.staff_apply import StaffApplicationTicket
from .TICKETS.partnership_apply import PartnershipApplicationTicket
from .TICKETS.esports_apply import EsportsApplicationTicket
from .TICKETS.giveaway_claim import GiveawayClaimTicket
from .TICKETS.help_support import HelpSupportTicket
from .TICKETS.host_giveaway import HostGiveawayTicket
from .TICKETS.sponcerships import SponsorshipTicket

TICKET_TYPES = [
    ("join_clan", "Join Clan", "‚öîÔ∏è"),
    ("apply_clan", "Apply Your Clan", "üõ°Ô∏è"),
    ("staff_application", "Staff Application", "üëî"),
    ("partnership_application", "Partnership Application", "ü§ù"),
    ("esports_application", "Esports Application", "üéÆ"),
    ("giveaway_claim", "Giveaway Claim", "üéÅ")
]
INDIVIDUAL_TICKETS = [
    ("sponsorship", "Sponsorships", "üí∞"),
    ("host_giveaway", "Host Giveaway", "üéâ"),
    ("help_support", "Help & Support", "‚ùì")
]

class MainDashboard(commands.Cog):
    """
    Main dashboard cog for managing all ticketing systems, their panels,
    config, and deployment in Blackspire Nation. Fully PLAN-compliant.
    """
    def __init__(self, bot):
        self.bot = bot
        self.mongo = bot.mongo_manager
        # Connect to separate ticket handler classes if needed
        self.ticket_handlers = {
            "join_clan": JoinClanTicket(bot),
            "apply_clan": ApplyClanTicket(bot),
            "staff_application": StaffApplicationTicket(bot),
            "partnership_application": PartnershipApplicationTicket(bot),
            "esports_application": EsportsApplicationTicket(bot),
            "giveaway_claim": GiveawayClaimTicket(bot),
            "help_support": HelpSupportTicket(bot),
            "host_giveaway": HostGiveawayTicket(bot),
            "sponsorship": SponsorshipTicket(bot)
        }

    @app_commands.command(
        name="main_dashboard",
        description="[Ticket Hub] Blackspire Nation: Manage and deploy all ticket panels"
    )
    async def main_dashboard(self, interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        guild_id = interaction.guild.id
        has_permission = await self.mongo.check_dashboard_permission(
            dashboard_name="main_dashboard",
            user_id=interaction.user.id,
            user_roles=user_roles,
            guild_id=guild_id
        )
        if not has_permission:
            embed = discord.Embed(title="‚ùå Access Denied", description="You don't have permission to access this dashboard.", color=0xff0000)
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        embed = discord.Embed(
            title="[Ticket] BLACKSPIRE NATION - Main Dashboard",
            description="Manage and deploy all ticket system panels:",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild and interaction.guild.icon else None)
        embed.set_footer(text="Blackspire Nation Ticket Hub", icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None)
        view = MainDashboardView(self.bot)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class MainDashboardView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=300)
        self.bot = bot

    @discord.ui.button(label="Main Panel", style=discord.ButtonStyle.primary, row=0)
    async def main_panel(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(title="[Main Panel] Configure Ticket Types", color=0x3498db)
        embed.description = "Configure ticket categories, questions, staff roles, images, for main ticket types."
        view = TicketTypeConfigView(self.bot, ticket_types=TICKET_TYPES, title="Main Panel Ticket Type")
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(label="Individual Panels", style=discord.ButtonStyle.primary, row=0)
    async def individual_panels(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(title="[Individual] Configure Additional Tickets", color=0x9b59b6)
        embed.description = "Configure sponsorship, giveaways, support panels."
        view = TicketTypeConfigView(self.bot, ticket_types=INDIVIDUAL_TICKETS, title="Individual Panel Type")
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(label="Deploy Panels", style=discord.ButtonStyle.success, row=1)
    async def deploy_panels(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(title="[Deploy] Panel Deployment", color=0x2ecc71)
        embed.description = "Deploy main or individual ticket panels to a server channel. Use next/prev buttons for paging if you have many channels/categories."
        view = PanelDeploymentView(self.bot)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class TicketTypeConfigView(discord.ui.View):
    def __init__(self, bot, ticket_types, title):
        super().__init__(timeout=300)
        self.bot = bot
        self.ticket_types = ticket_types
        self.title = title
        options = [discord.SelectOption(label=label, value=name, emoji=emoji) for name, label, emoji in ticket_types]
        select = discord.ui.Select(placeholder="Choose a ticket type to configure", options=options, min_values=1, max_values=1)
        select.callback = self.select_ticket
        self.add_item(select)

    async def select_ticket(self, interaction: discord.Interaction):
        ticket_type = interaction.data['values'][0]
        embed = discord.Embed(
            title=f"[Config] {ticket_type.replace('_', ' ').title()} Configuration",
            color=0x00ff99,
            description="Select what you want to configure for this ticket type:"
        )
        view = TicketConfigOptionsView(self.bot, ticket_type)
        await interaction.response.edit_message(embed=embed, view=view)

class TicketConfigOptionsView(discord.ui.View):
    def __init__(self, bot, ticket_type):
        super().__init__(timeout=300)
        self.bot = bot
        self.ticket_type = ticket_type

    @discord.ui.button(label="Questions", style=discord.ButtonStyle.primary, row=0)
    async def questions(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Should open a modal for question configuration, not implemented here.
        await interaction.response.send_message(content=f"[Questions] Configure for {self.ticket_type}", ephemeral=True)

    @discord.ui.button(label="Staff Roles", style=discord.ButtonStyle.primary, row=0)
    async def staff_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content=f"[Staff Roles] Configure for {self.ticket_type}", ephemeral=True)

    @discord.ui.button(label="Ticket Category", style=discord.ButtonStyle.primary, row=1)
    async def ticket_category(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content=f"[Ticket Category] Configure for {self.ticket_type}", ephemeral=True)

    @discord.ui.button(label="Panel Image", style=discord.ButtonStyle.primary, row=1)
    async def panel_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content=f"[Panel Image] Configure for {self.ticket_type}", ephemeral=True)

class PanelDeploymentView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=300)
        self.bot = bot
    @discord.ui.button(label="Deploy Main Panel", style=discord.ButtonStyle.success, row=0)
    async def deploy_main_panel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content="[Deploy Main Panel] Channel/category selection not implemented yet", ephemeral=True)
    @discord.ui.button(label="Deploy Sponsorship", style=discord.ButtonStyle.secondary, row=1)
    async def deploy_sponsorship(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content="[Deploy Sponsorship Panel] Selection not implemented yet", ephemeral=True)
    @discord.ui.button(label="Deploy Host Giveaway", style=discord.ButtonStyle.secondary, row=1)
    async def deploy_host_giveaway(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content="[Deploy Host Giveaway] Selection not implemented yet", ephemeral=True)
    @discord.ui.button(label="Deploy Help & Support", style=discord.ButtonStyle.secondary, row=1)
    async def deploy_help_support(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(content="[Deploy Help & Support] Selection not implemented yet", ephemeral=True)

async def setup(bot):
    await bot.add_cog(MainDashboard(bot))
